print(test5[3,'ProportionOfSample'])
typeof(test5[3, 'ProportionOfSample'])
type.convert(test5['ProportionOfSample'], )
help("type.convert")
transform(test5, as.numeric('ProportionOfSample'), as.numeric('DepthMeasured'))
graph
graph <- + geom_area(position='fill')
graph <- graph+ geom_area(position='fill')
graph
clear
clear()
graph <- ggplot(test5, aes(x=ProportionOfSample, y=DepthMeasured, group=SedClass))+geom_area(position = 'fill')
graph
graph <- ggplot(test5, aes(x='ProportionOfSample', y='DepthMeasured', group=SedClass))+geom_area(position = 'fill')
graph
graph <- ggplot(test5, aes(x=ProportionOfSample, y=DepthMeasured, group=SedClass))+geom_area(position = 'fill')
graph
graph <- ggplot(test5, aes(x=ProportionOfSample, y=DepthMeasured, group=SedClass, fill=Sedclass))+geom_area(position = 'fill')
graph
graph <- ggplot(test5, aes(x=ProportionOfSample, y=DepthMeasured, group=SedClass, fill=SedClass))+geom_area(position = 'fill')
graph
clear
clear()
df2 <- tapply(test5$ProportionOfSample, test5$DepthMeasured, FUN = Sum)
df2 <- tapply(test5$ProportionOfSample, test5$DepthMeasured, FUN = sum)
View(df2)
df3 <- aggregate(cbind(test5$DepthMeasured, test5$ProportionOfSample, test5$SedClass))
df3 <- aggregate(cbind(test5$DepthMeasured, test5$ProportionOfSample, test5$SedClass), FUN = sum)
df3 <- aggregate( test5$ProportionOfSample, by=test5$DepthMeasured)
df3 <- aggregate( test5$ProportionOfSample, by=test5$DepthMeasured, FUN = sum)
df3 <- aggregate( test5$ProportionOfSample, by=list(test5$DepthMeasured), FUN = sum)
df3
clear()
test6 <- na.omit(test5)
df3 <- aggregate( test6$ProportionOfSample, by=list(test6$DepthMeasured), FUN = sum)
df3
graph <- ggplot(test6, aes(x=ProportionOfSample, y=DepthMeasured, group=SedClass, fill=SedClass))+geom_area(position = 'fill')
graph
graph <- ggplot(test6, aes(x=ProportionOfSample, y=DepthMeasured, group=SedClass, fill=SedClass))+geom_line(position = 'fill')
graph
graph <- ggplot(test6, aes(x=ProportionOfSample, y=DepthMeasured, group=SedClass, fill=SedClass))+geom_point()
graph
graph <- ggplot(test6, aes(x=ProportionOfSample, y=DepthMeasured, group=SedClass, fill=SedClass, color=cyl))+geom_point()
graph
graph <- ggplot(test6, aes(x=ProportionOfSample, y=DepthMeasured, group=SedClass, fill=SedClass, color=SedClass))+geom_point()
graph
df3 <- aggregate( test6$ProportionOfSample, by=list(test6$SedClass), FUN = sum)
df3
df4 <- aggregate(cbind(test6$ProportionOfSample, test6$DepthMeasured), by=list(test6$SedClass), FUN = sum)
df4 <- aggregate(cbind(test6$ProportionOfSample, by=cbind(list(test6$SedClass), list(test6$DepthMeasured)) FUN = sum)
df4 <- aggregate(cbind(test6$ProportionOfSample, by=cbind(list(test6$SedClass), list(test6$DepthMeasured)), FUN = sum)
)
clear()
df3
clear()
library(dplyr)
clear()
test7 <- test5 %>% group_by(DepthMeasured, SedClass) %>% summarise(SedProp = sum(ProportionOfSample, na.rm = TRUE))
View(test7)
graph <- ggplot(test7, aes(x=SedProp, y=DepthMeasured, group=SedClass, fill=SedClass))+geom_area()
graph
graph <- ggplot(test7, aes(y=SedProp, x=DepthMeasured, group=SedClass, fill=SedClass))+geom_area()
graph
graph <- ggplot(test7, aes(y=SedProp, x=DepthMeasured, group=SedClass, fill=SedClass))+geom_area()+coord_flip()
graph
clear()
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph2 <- sedGraph(test7)
graph2 <- sedGraph(test7, format = FALSE)
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph2 <- sedGraph(test7, format = FALSE)
graph2
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph2 <- sedGraph(test7, format = FALSE)
graph2
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph2 <- sedGraph(test7, format = FALSE)
graph2
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph2 <- sedGraph(test7, format = FALSE)
graph2
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
test8<-test7
clear()
test8$SedClass<-factor(test8$SedClass, levels = c("Clay", "Silt", "Sand"))
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test8, format = FALSE)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3
graph3<-sedGraph(test8, format = FALSE)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test8, format = FALSE)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test8, format = FALSE)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test8, format = FALSE)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test8, format = FALSE)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test8, format = FALSE)
graph3
graph3<-sedGraph(test8, format = FALSE, greys = FALSE)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test8, format = FALSE, greys = FALSE)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3
graph3<-sedGraph(test8, format = FALSE, greys = FALSE)
graph3
test8$SedProp<-test8$SedProp/100
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test8, format = FALSE, greys = FALSE)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test7, greys = FALSE)
graph3<-sedGraph(test6, greys = FALSE)
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6, greys = FALSE)
graph3
View(test6)
View(test6)
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6, greys = FALSE)
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6, greys = FALSE)
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6, greys = FALSE)
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6, greys = FALSE)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6, greys = FALSE)
graph3
graph3<-sedGraph(test6)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
graph3<-sedGraph(test6)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
graph3<-sedGraph(test6)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
graph3
graph3<-sedGraph(test6)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
graph3<-sedGraph(test6)
graph3
source('~/Documents/Programming/R Projects/SedGraphFunction.R')
savePlot()
clear()
install.packages(c("assertthat", "BH", "blob", "boot", "class", "cli", "cluster", "codetools", "colorspace", "curl", "data.table", "digest", "evaluate", "foreign", "ggplot2", "glue", "gtable", "hexbin", "hms", "httpuv", "httr", "jsonlite", "knitr", "later", "lattice", "lazyeval", "markdown", "MASS", "Matrix", "mgcv", "mime", "nlme", "openssl", "openxlsx", "plotly", "progress", "purrr", "R6", "rmarkdown", "rpart", "shiny", "stringi", "stringr", "survival", "swirl", "testthat", "tidyr", "tinytex", "vistime", "xfun", "xtable", "zip"))
install.packages(c("assertthat", "BH", "blob", "boot", "class", "cli", "cluster", "codetools", "colorspace", "curl", "data.table", "digest", "evaluate", "foreign", "ggplot2", "glue", "gtable", "hexbin", "hms", "httpuv", "httr", "jsonlite", "knitr", "later", "lattice", "lazyeval", "markdown", "MASS", "Matrix", "mgcv", "mime", "nlme", "openssl", "openxlsx", "plotly", "progress", "purrr", "R6", "rmarkdown", "rpart", "shiny", "stringi", "stringr", "survival", "swirl", "testthat", "tidyr", "tinytex", "vistime", "xfun", "xtable", "zip"))
install.packages(c("assertthat", "BH", "blob", "boot", "class", "cli", "cluster", "codetools", "colorspace", "curl", "data.table", "digest", "evaluate", "foreign", "ggplot2", "glue", "gtable", "hexbin", "hms", "httpuv", "httr", "jsonlite", "knitr", "later", "lattice", "lazyeval", "markdown", "MASS", "Matrix", "mgcv", "mime", "nlme", "openssl", "openxlsx", "plotly", "progress", "purrr", "R6", "rmarkdown", "rpart", "shiny", "stringi", "stringr", "survival", "swirl", "testthat", "tidyr", "tinytex", "vistime", "xfun", "xtable", "zip"))
install.packages(c("assertthat", "BH", "blob", "boot", "class", "cli", "cluster", "codetools", "colorspace", "curl", "data.table", "digest", "evaluate", "foreign", "ggplot2", "glue", "gtable", "hexbin", "hms", "httpuv", "httr", "jsonlite", "knitr", "later", "lattice", "lazyeval", "markdown", "MASS", "Matrix", "mgcv", "mime", "nlme", "openssl", "openxlsx", "plotly", "progress", "purrr", "R6", "rmarkdown", "rpart", "shiny", "stringi", "stringr", "survival", "swirl", "testthat", "tidyr", "tinytex", "vistime", "xfun", "xtable", "zip"))
install.packages(c("assertthat", "BH", "blob", "boot", "class", "cli", "cluster", "codetools", "colorspace", "curl", "data.table", "digest", "evaluate", "foreign", "ggplot2", "glue", "gtable", "hexbin", "hms", "httpuv", "httr", "jsonlite", "knitr", "later", "lattice", "lazyeval", "markdown", "MASS", "Matrix", "mgcv", "mime", "nlme", "openssl", "openxlsx", "plotly", "progress", "purrr", "R6", "rmarkdown", "rpart", "shiny", "stringi", "stringr", "survival", "swirl", "testthat", "tidyr", "tinytex", "vistime", "xfun", "xtable", "zip"))
install.packages(c("assertthat", "BH", "blob", "boot", "class", "cli", "cluster", "codetools", "colorspace", "curl", "data.table", "digest", "evaluate", "foreign", "ggplot2", "glue", "gtable", "hexbin", "hms", "httpuv", "httr", "jsonlite", "knitr", "later", "lattice", "lazyeval", "markdown", "MASS", "Matrix", "mgcv", "mime", "nlme", "openssl", "openxlsx", "plotly", "progress", "purrr", "R6", "rmarkdown", "rpart", "shiny", "stringi", "stringr", "survival", "swirl", "testthat", "tidyr", "tinytex", "vistime", "xfun", "xtable", "zip"))
install.packages('svglite')
install.package('svglite')
install.packages("svglite")
install.packages("svglite")
install.packages(c("cluster", "data.table", "hexbin", "hms", "nlme", "rmarkdown", "sys", "xfun"))
install.packages("svglite")
install.packages('packrat')
library("packrat", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages(c("cluster", "data.table", "hexbin", "nlme"))
library(readr)
DONEZO <- read_csv("Documents/Projects/Python/MPBAUM-WPB-0-0/DONEZO.csv")
View(DONEZO)
table <- na.omit(DONEZO)
View(table)
source('~/Documents/Projects/Python/SedProcessing/SedimentGraph/SedGraphFunction.R')
sedGraph(table, format = FALSE, greys = FALSE) {
})
sedGraph(table, format = FALSE, greys = FALSE)
source('~/Documents/Projects/Python/SedProcessing/SedimentGraph/SedGraphFunction.R')
sedGraph(table, format = FALSE, greys = FALSE)
type(table)
sapply(table, class)
sapply(table$DepthMeasured, as.numeric)
sapply(table, class)
table$DepthMeasured <- sapply(table$DepthMeasured, as.numeric)
sapply(table, class)
sedGraph(table, format = FALSE, greys = FALSE)
source('~/Documents/Projects/Python/SedProcessing/SedimentGraph/SedGraphFunction.R')
sedGraph(table, format = FALSE, greys = FALSE)
table$SedClass <- factor(table$SedClass, levels = list( 'Clay', 'Silt', 'Sand'))
sedGraph(table, format = FALSE, greys = FALSE)
View(graph)
View(graph)
View(graph)
View(graph)
View(graph2)
View(graph3)
sapply(table, class)
sapply(table, class)
library('readxl')
read_xlsx('EmbaymentData_Basic.xlsx')
read_xlsx('~/Documents/Projects/Python/EmbaymentProcessing/EmbaymentData_Basic.xlsx')
df2 <- read_xlsx('EmbaymentData_Basic.xlsx')
df2 <- read_xlsx('~/Documents/Projects/Python/EmbaymentProcessing/EmbaymentData_Basic.xlsx')
library('ggplot2')
plt <- ggboxplot(df2)
plt <- ggplot(df2, aes(Descriptor, C))
plt + geom_boxplot()
plt <- ggplot(df2, aes,(Type 1 C))
plt <- ggplot(df2, aes,(Type 1, C))
plt <- ggplot(df2, aes('Type 1', C))
plt + geom_boxplot()
plt <- ggplot(df2, aes(df2$`Type 1`, C))
plt + geom_boxplot()
plt + geom_violin()
plt + geom_violin() + geom_hline(y=1)
plt + geom_violin() + geom_hline(yintercept =  1)
plt + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red')
vioplot <- plt + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red')
ggplot(subdf aes(x = Type, y = Cratio))c+geom_histogram()
ggplot(subdf aes(x = Type, y = CRatio))+geom_histogram()
ggplot(subdf ,aes(x = Type, y = CRatio))+geom_histogram()
ggplot(subdf ,aes(x = C))+geom_histogram()
ggplot(subdf ,aes())+geom_histogram()
ggplot(subdf ,aes(x=CRatio))+geom_histogram(binwidth = 0.2)
ggplot(subdf ,aes(x=CRatio))+geom_histogram(binwidth = 0.1)
ggplot(subdf ,aes(x=CRatio))+geom_histogram(binwidth = 0.05)
ggplot(subdf ,aes(x=CRatio))+geom_histogram(binwidth = 0.1)
vioplot
vioplot + aes(xlab('Coastal Feature Class'))
vioplot + xlab('Coastal Feature Class')
vioplot
plt <- ggplot(df2, aes(df2$`Type 1`, C))
vioplot <- plt + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red')
df2 <- read_xlsx('~/Documents/Projects/Python/EmbaymentProcessing/EmbaymentData_Basic.xlsx')
library('readxl')
df2 <- read_xlsx('~/Documents/Projects/Python/EmbaymentProcessing/EmbaymentData_Basic.xlsx')
plt <- ggplot(df2, aes(df2$`Type 1`, C))
library(ggplot2)
plt <- ggplot(df2, aes(df2$`Type 1`, C))
vioplot <- plt + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red')
vioplot
View(df2)
df2 <- read_xlsx('~/Documents/Projects/Python/EmbaymentProcessing/EmbaymentData_Basic.xlsx')
plt <- ggplot(df2, aes(df2$`Type 1`, C))
vioplot <- plt + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red')
vioplot
plt2 <- ggplot(df2, aes(df2$`Descriptor`, C))
vioplot2 <- plt2 + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red')
vioplot2
vioplot2 <- plt2 + geom_bar() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red')
vioplot2
clear()
vioplot
df3 <- subset(df2, `Type 1` != 'Coastal Plain' && `Type 1` != 'Fjord' && `Type 1` != NA)
plt2 <- ggplot(df3, aes(df2$`Descriptor`, C))
plt2 <- ggplot(df3, aes(df3$`Descriptor`, C))
vioplot2 <- plt2 + geom_bar() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red')
vioplot2
View(df3)
df3 <- subset(df2, `Type 1` != 'Coastal Plain' | `Type 1` != 'Fjord' | `Type 1` != NA)
vioplot2
plt2 <- ggplot(df3, aes(df3$`Descriptor`, C))
vioplot2 <- plt2 + geom_bar() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red')
vioplot2
vioplot2 <- plt2 + geom_violing() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red')
vioplot2 <- plt2 + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red')
vioplot2
plt2 <- ggplot(df3, aes(df3$`Type 1`, C))
vioplot2 <- plt2 + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red')
vioplot2
df3 <- subset(df2, `Type 1` != 'Coastal Plain ' | `Type 1` != 'Fjord ' | `Type 1` != NA)
plt2 <- ggplot(df3, aes(df3$`Type 1`, C))
vioplot2 <- plt2 + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red')
vioplot2
df3 <- subset(df2, `Type 1` != 'Coastal Plain' | `Type 1` != 'Fjord' | `Type 1` != NA)
df3 <- subset(df2, xor(c(`Type 1` != 'Coastal Plain' XOR `Type 1` != 'Fjord'  `Type 1` != NA)))
df3 <- subset(df2, `Type 1` != 'Coastal Plain' | `Type 1` != 'Fjord' | `Type 1` != NA)
df3 <- subset(df2, `Type 1` != 'Coastal Plain')
df3 <- subset(df3,  `Type 1` != 'Fjord' )
df3 <- subset(df3,   `Type 1` != NA )
df3 <- subset(df2, `Type 1` != 'Coastal Plain' | `Type 1` != 'Fjord' | `Type 1` != NA)
df3 <- subset(df2, `Type 1` != 'Coastal Plain')
df3 <- subset(df3,  `Type 1` != 'Fjord' )
df3 <- complete.cases(df3)
df3 <- subset(df2, `Type 1` != 'Coastal Plain')
df3 <- subset(df3,   `Type 1` != NA )
df3 <- subset(df2, `Type 1` != 'Coastal Plain')
df3 <- subset(df3,  `Type 1` != 'Fjord' )
df3 <- df3[complete.cases(df3),]
plt2 <- ggplot(df3, aes(df3$`Type 1`, C))
vioplot2 <- plt2 + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red')
vioplot2
vioplot2 <- plt2 + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red') + xlab('Coastal Feature Type') + ylab ('Constriction Ratio ('C')
vioplot2 <- plt2 + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red') + xlab('Coastal Feature Type') + ylab ('Constriction Ratio (C)')
vioplot2
vioplot2
vioplot2 <- plt2 + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red') + xlab('Coastal Feature Type') + ylab ('Constriction Ratio (C)')
vioplot2 <- plt2 + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red') + xlab('Coastal Feature Type') + ylab ('Constriction Ratio (C)') + geom_text(aes(0,1, label='Lm = Lb'))
vioplot2
vioplot2 <- plt2 + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red') + xlab('Coastal Feature Type') + ylab ('Constriction Ratio (C)') + geom_text(aes('LSE',1, label='Lm = Lb'))
vioplot2
vioplot2 <- plt2 + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red') + xlab('Coastal Feature Type') + ylab ('Constriction Ratio (C)') + geom_text(aes('LSE',1.05, label='Lm = Lb'))
vioplot2
vioplot2 <- plt2 + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red') + xlab('Coastal Feature Type') + ylab ('Constriction Ratio (C)') + geom_text(aes('LSE',1.05, label='Lm = Lb')) + geom_text('LSE', 0.305, label='C = 0.3', color='red')
vioplot2 <- plt2 + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red') + xlab('Coastal Feature Type') + ylab ('Constriction Ratio (C)') + geom_text(aes('LSE',1.05, label='Lm = Lb')) + geom_text('LSE', 0.305, label='C = 0.3', color='red'))
vioplot2 <- plt2 + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red') + xlab('Coastal Feature Type') + ylab ('Constriction Ratio (C)') + geom_text(aes('LSE',1.05, label='Lm = Lb')) + geom_text(aes('LSE', 0.305, label='C = 0.3', color='red'))
vioplot2
vioplot2 <- plt2 + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red') + xlab('Coastal Feature Type') + ylab ('Constriction Ratio (C)') + geom_text(aes('LSE',1.05, label='Lm = Lb')) + geom_text(aes('LSE', 0.35, label='C = 0.3', color='red'))
vioplot2
vioplot2 <- plt2 + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red') + xlab('Coastal Feature Type') + ylab ('Constriction Ratio (C)') + geom_text(aes('LSE',1.05, label='Lm = Lb')) + geom_text(aes('Macrotidal', 0.25, label='C = 0.3', color='red'))
vioplot2
vioplot2 <- plt2 + geom_violin() + geom_hline(yintercept =  1) + geom_hline(yintercept = 0.3, color='red') + xlab('Coastal Feature Type') + ylab ('Constriction Ratio (C)') + geom_text(aes('LSE',1.05, label='Lm = Lb')) + geom_text(aes('Macrotidal', 0.25, label='C = 0.3', color='red')) + theme(legend.position = "none")
vioplot2
plot(cars)
plot(cars)
getcwd()
getwd()
setwd('Documents/Projects/Python/')
setwd('EmbaymentProcessing/')
getwd()
library('readr')
setwd('/Users/tinabaum/Documents/Projects/Python/EmbaymentProcessing/')
df <- readr::read_csv('./DataOutput/LogTidyData.csv')
df.plot()
library('readr')
setwd('/Users/tinabaum/Documents/Projects/Python/EmbaymentProcessing/')
df <- readr::read_csv('./DataOutput/LogTidyData.csv')
df.summary()
library('readr')
setwd('/Users/tinabaum/Documents/Projects/Python/EmbaymentProcessing/')
df <- readr::read_csv('./DataOutput/LogTidyData.csv')
df.summary
library('readr')
setwd('/Users/tinabaum/Documents/Projects/Python/EmbaymentProcessing/')
df <- readr::read_csv('./DataOutput/LogTidyData.csv')
summary(df)
library('readr')
setwd('/Users/tinabaum/Documents/Projects/Python/EmbaymentProcessing/')
df <- readr::read_csv('./DataOutput/LogTidyData.csv', header=TRUE, strip.white=TRUE)
library('readr')
setwd('/Users/tinabaum/Documents/Projects/Python/EmbaymentProcessing/')
df <- readr::read_csv('./DataOutput/LogTidyData.csv')
summary(df)
library('readr')
setwd('/Users/tinabaum/Documents/Projects/Python/EmbaymentProcessing/')
df <- readr::read_csv('./DataOutput/LogTidyData.csv')
summary(df)
qqplot(df)
qqplot(df['Lm'])
qqplot(df[,'Lm'])
qqplot(df[:,'Lm'])
library('readr')
library('dplyr')
setwd('/Users/tinabaum/Documents/Projects/Python/EmbaymentProcessing/')
df <- readr::read_csv('./DataOutput/LogTidyData.csv')
summary(df)
qqplot(df[,4])
qqplot(df$Lm)
qqnorm(df$Lm, )
qqnorm(df$Lm)
qqline(df$Lm)
qqnorm(df$Lm)
qqline(df$Lm, col = 'steelblue')
qqnorm(df$Lm)
qqline(df$Lm, col = 'steelblue', lwd=2)
qqnorm(df$Lb)
qqline(df$Lb, col = 'steelblue', lwd=2)
qqnorm(df$C)
qqline(df$C, col = 'steelblue', lwd=2)
maov <- manova(cbind(Lm, Lb, C) ~ `Type 1`, data = df)
summary(maov)
df.maov <- manova(cbind(Lm, Lb, C) ~ `Type 1`, data = df)
summary(df.maov)
df.maov <- manova(cbind(Lm, Lb) ~ `Type 1`, data = df)
summary(df.maov)
summary.aov(df.maov)
summary.manova(df.maov)
summary.aov(df.maov)
lm.aov<- aov(df$Lm ~ df$`Type 1`)
summary(lm.aov)
lm.hsd<- TukeyHSD(lm.aov, `Type 1`)
lm.hsd<- TukeyHSD(lm.aov)
summary(lm.hsd)
lm.aov<- anova(df$Lm ~ df$`Type 1`)
lm.aov<- aov(df$Lm ~ df$`Type 1`)
summary(lm.aov)
lm.hsd<- TukeyHSD(lm.aov, `Type 1`)
Lm.lm <- lm(df$Lm ~ df$`Type 1`, data = df)
Lm.aov<- aov(Lm.lm)
summary(Lm.aov)
Lm.hsd<- TukeyHSD(Lm.aov)
Lm.hsd
Lb.lm <- lm(df$Lb ~ df$`Type 1`, data = df)
Lb.aov <- aov(Lb.lm)
summary.aov(Lb.aov)
Lb.hsd <- TukeyHSD(Lb.aov)
Lb.hsd
C.lm <- lm(df$C ~ df$`Type 1`)
C.aov<- aov(C.lm)
summary.aov(C.aov)
C.hsd<-TukeyHSD(C.aov)
C.hsd
write.csv(Lm.hsd$`df$`Type 1``, '/Users/tinabaum/Documents/Projects/Python/EmbaymentProcessing/DataOutput/R_Data/Lm_HSD.csv')
write.csv(Lm.hsd$`df$`Type 1``, '/Users/tinabaum/Documents/Projects/Python/EmbaymentProcessing/DataOutput/R_Data/Lm_HSD.csv')
library('readr')
library('dplyr')
setwd('/Users/tinabaum/Documents/Projects/Python/EmbaymentProcessing/')
df <- readr::read_csv('./DataOutput/LogTidyData.csv')
names(df[names(df) == `Type 1`]) = 'EmbClass'
library('readr')
library('dplyr')
setwd('/Users/tinabaum/Documents/Projects/Python/EmbaymentProcessing/')
df <- readr::read_csv('./DataOutput/LogTidyData.csv')
names(df)[names(df) == `Type 1`] = 'EmbClass'
library('readr')
library('dplyr')
setwd('/Users/tinabaum/Documents/Projects/Python/EmbaymentProcessing/')
df <- readr::read_csv('./DataOutput/LogTidyData.csv')
names(df)[names(df) == 'Type 1'] = 'EmbClass'
summary(df)
write.csv(Lm.hsd$`df$`Type 1``, '/Users/tinabaum/Documents/Projects/Python/EmbaymentProcessing/DataOutput/R_Data/Lm_HSD.csv')
library('readr')
library('dplyr')
setwd('/Users/tinabaum/Documents/Projects/Python/EmbaymentProcessing/')
df <- readr::read_csv('./DataOutput/LogTidyData.csv')
names(df)[names(df) == 'Type 1'] = 'EmbClass'
summary(df)
qqnorm(df$Lm)
qqline(df$Lm, col = 'steelblue', lwd=2)
qqnorm(df$Lb)
qqline(df$Lb, col = 'steelblue', lwd=2)
qqnorm(df$C)
qqline(df$C, col = 'steelblue', lwd=2)
df.maov <- manova(cbind(Lm, Lb) ~ `Type 1`, data = df)
Lm.lm <- lm(df$Lm ~ df$EmbClass, data = df)
Lm.aov<- aov(Lm.lm)
summary(Lm.aov)
Lb.lm <- lm(df$Lb ~ df$EmbClass, data = df)
Lb.aov <- aov(Lb.lm)
summary.aov(Lb.aov)
Lb.hsd <- TukeyHSD(Lb.aov)
Lb.hsd
Lm.hsd<- TukeyHSD(Lm.aov)
Lm.hsd
C.lm <- lm(df$C ~ df$EmbClass)
C.aov<- aov(C.lm)
summary.aov(C.aov)
C.hsd<-TukeyHSD(C.aov)
C.hsd
write.csv(Lm.hsd$`df$EmbClass`, '/Users/tinabaum/Documents/Projects/Python/EmbaymentProcessing/DataOutput/R_Data/Lm_HSD.csv')
write.csv(Lb.hsd$`df$EmbClass`, '/Users/tinabaum/Documents/Projects/Python/EmbaymentProcessing/DataOutput/R_Data/Lb_HSD.csv')
write.csv(C.hsd$`df$EmbClass`, '/Users/tinabaum/Documents/Projects/Python/EmbaymentProcessing/DataOutput/R_Data/C_HSD.csv')
